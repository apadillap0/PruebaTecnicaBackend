plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.alianza'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
	implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
	testImplementation 'org.junit.platform:junit-platform-runner:1.10.2'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/entity/*",
					"**/data/*",
					"**/dto/*",
					"**/exceptions/*",
					"**/utils/*",
					"com/alianza/pruebatecnica/PruebatecnicaApplication.class"
			])
		}))
	}
}
